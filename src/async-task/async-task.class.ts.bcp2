import { Abortable } from '../abortable/abortable.class';
import { noop } from '../noop';
import { SingleEventEmitter } from '../single-event-emitter.class';
import { IAsyncTaskConstraint } from './types/async-task-constraint.type';
import { IAsyncTaskInput } from './types/async-task-input.type';
import { IAsyncTaskFactory } from './types/factory/async-task-factory.type';
import { IGenericAsyncTaskFactoriesList } from './types/factory/generic-async-task-factories-list.type';
import { IAsyncTaskErrorFunction } from './types/init/async-task-error-function.type';
import { IAsyncTaskInitFunction } from './types/init/async-task-init-function.type';
import { IAsyncTaskSuccessFunction } from './types/init/async-task-success-function.type';
import { IAsyncTaskOnAbortedFunction } from './types/methods/aborted/async-task-on-aborted-function.type';
import { IAsyncTaskOnErroredFunction } from './types/methods/errored/async-task-on-errored-function.type';
import { IAsyncTaskOnFinallyFunction } from './types/methods/finally/async-task-on-finally-function.type';
import { IAsyncTaskOnResolvedFunction } from './types/methods/resolved/async-task-on-resolved-function.type';
import { IAsyncTaskOnSuccessfulFunction } from './types/methods/successful/async-task-on-successful-function.type';
import { IAsyncTaskResolvedState } from './types/state/async-task-resolved-state.type';
import { IAsyncTaskAllSettledState } from './types/static-methods/all-settled/async-task-all-settled-state.type';
import { IAsyncTaskAllSettledValuesListReturn } from './types/static-methods/all-settled/async-task-all-settled-values-list-return.type';
import { IAsyncTaskAllValuesListReturn } from './types/static-methods/all/async-task-all-values-list-return.type';
import { IAsyncTaskDeferReturn } from './types/static-methods/defer/async-task-defer-return.type';
import { IAsyncTaskRaceValueReturn } from './types/static-methods/race/async-task-race-value-return.type';
import { IAsyncTaskResolvedStateFunction } from './types/methods/resolved-state/async-task-resolved-state-function.type';

/*--------------------*/

export const ASYNC_TASK_SUCCESS = Symbol();

const PENDING_STATE = 0;
const RESOLVING_STATE = 1;
const RESOLVED_STATE = 2;

type IAsyncTaskState =
  | typeof PENDING_STATE
  | typeof RESOLVING_STATE
  | typeof RESOLVED_STATE
  ;

export class AsyncTask<GValue extends IAsyncTaskConstraint<GValue>> {
  /**
   * Creates an AsyncTask from an IAsyncTaskFactory.
   */
  static fromFactory<GValue extends IAsyncTaskConstraint<GValue>>(
    factory: IAsyncTaskFactory<GValue>,
    abortable: Abortable,
  ): AsyncTask<GValue> {
    if (abortable.aborted) {
      return this.never(abortable);
    } else {
      let input: IAsyncTaskInput<GValue>;

      try {
        input = factory(abortable);
      } catch (error: unknown) {
        return this.error<GValue>(error, abortable);
      }

      if (input instanceof AsyncTask) {
        if (input.#abortable === abortable) {
          return input;
        } else {
          throw new Error(`AsyncTask must have the same Abortable than the one provided.`);
        }
      } else {
        return this.success(input, abortable);
      }
    }
  }

  /**
   * Tries "count" times to create an AsyncTask from an IAsyncTaskFactory:
   *  (1) if "count" is zero or less, throw an error
   *  (2) else call factory:
   *    - in case of success return the result
   *    - else decrease count by one:
   *      - if zero or less, throw the received error
   *      - else repeat (1) with the new "count" value
   */
  static retry<GValue extends IAsyncTaskConstraint<GValue>>(
    factory: IAsyncTaskFactory<GValue>,
    count: number,
    abortable: Abortable,
  ): AsyncTask<GValue> {
    if (count <= 0) {
      return AsyncTask.error<GValue>(new Error(`Reached retry limit`), abortable);
    } else {
      return AsyncTask.fromFactory(factory, abortable)
        .errored((error: unknown, abortable: Abortable): AsyncTask<GValue> | never => {
          count--;
          if (count <= 0) {
            throw error;
          } else {
            return this.retry<GValue>(factory, count, abortable);
          }
        });
    }
  }

  /**
   * Creates a "successful" AsyncTask.
   * If "value" is an AsyncTask or Promise, then the returned AsyncTask will take the same state when resolved.
   */
  static success<GValue extends IAsyncTaskConstraint<GValue>>(
    value: IAsyncTaskInput<GValue>,
    abortable: Abortable,
  ): AsyncTask<GValue> {
    return new AsyncTask<GValue>((
      success: IAsyncTaskSuccessFunction<GValue>,
    ): void => {
      success(value);
    }, abortable);
  }

  /**
   * Creates an "errored" AsyncTask.
   */
  static error<GValue extends IAsyncTaskConstraint<GValue> = any>(
    _error: any,
    abortable: Abortable,
  ): AsyncTask<GValue> {
    return new AsyncTask<GValue>((
      success: IAsyncTaskSuccessFunction<GValue>,
      error: IAsyncTaskErrorFunction,
    ): void => {
      error(_error);
    }, abortable);
  }

  /**
   * Creates an AsyncTask that never complete (never enter in a "success" or "error" state).
   * However, it can still be aborted.
   */
  static never<GValue extends IAsyncTaskConstraint<GValue> = any>(
    abortable: Abortable,
  ): AsyncTask<GValue> {
    return new AsyncTask<GValue>(noop, abortable);
  }

  /**
   * Creates a "successful" AsyncTask, whose value is "undefined".
   */
  static void(
    abortable: Abortable,
  ): AsyncTask<void> {
    return this.success<void>(void 0, abortable);
  }

  /**
   * Creates an AsyncTask with exposed "success" and "error" functions.
   */
  static defer<GValue extends IAsyncTaskConstraint<GValue>>(
    abortable: Abortable,
  ): IAsyncTaskDeferReturn<GValue> {
    let success!: IAsyncTaskSuccessFunction<GValue>;
    let error!: IAsyncTaskErrorFunction;

    const task = new AsyncTask<GValue>((
      _success: IAsyncTaskSuccessFunction<GValue>,
      _error: IAsyncTaskErrorFunction,
    ): void => {
      success = _success;
      error = _error;
    }, abortable);

    return {
      task,
      success,
      error,
    };
  }

  /**
   * Creates a AsyncTask, whose Abortable is aborted when "success" or "error" is called.
   * This is sometimes useful to clear some resources.
   */
  static abortOnFinished<GValue extends IAsyncTaskConstraint<GValue>>(
    init: IAsyncTaskInitFunction<GValue>,
    abortable: Abortable,
  ): AsyncTask<GValue> {
    return new AsyncTask<GValue>((
      success: IAsyncTaskSuccessFunction<GValue>,
      error: IAsyncTaskErrorFunction,
      abortable: Abortable,
    ): void => {
      const [_abort, _abortable] = Abortable.derive(abortable);

      init(
        (
          value: IAsyncTaskInput<GValue>,
        ): void => {
          _abort(ASYNC_TASK_SUCCESS);
          success(value);
        },
        (
          __error: any,
        ): void => {
          _abort(__error);
          error(__error);
        },
        _abortable,
      );
    }, abortable);
  }

  /**
   * Returns an AsyncTask resolved with all the values returned by the factories (as an array).
   * If any of the AsyncTasks returned by the factories enters in an "error" state, the returned AsyncTask enters in an "error" state too,
   * add all other factories are aborted.
   */
  static all<GFactories extends IGenericAsyncTaskFactoriesList>(
    factories: GFactories,
    abortable: Abortable,
  ): AsyncTask<IAsyncTaskAllValuesListReturn<GFactories>> {
    type GValues = IAsyncTaskAllValuesListReturn<GFactories>;
    type GValue = GValues[number];

    return this.abortOnFinished<GValues>((
      success: IAsyncTaskSuccessFunction<GValues>,
      error: IAsyncTaskErrorFunction,
      abortable: Abortable,
    ): void => {
      let done: number = 0;
      let total: number = 0;
      let values: GValues;

      const successIfDone = (): void => {
        if (done === total) {
          success(values);
        }
      };

      const iterator: Iterator<IAsyncTaskFactory<GValue>> = factories[Symbol.iterator]();
      let result: IteratorResult<IAsyncTaskFactory<GValue>>;

      while (!(result = iterator.next()).done) {
        const i: number = total;
        total++;

        const task: AsyncTask<GValue> = this.fromFactory(result.value, abortable);
        task.#resolvedStateEventEmitter.subscribe((
          state: IAsyncTaskResolvedState<GValues>,
        ): void => {
          if (state.state === 'success') {
            done++;
            values[i] = state.value;
            successIfDone();
          } else if (state.state === 'error') {
            error(state.error);
          }
        });
      }

      values = new Array(total) as GValues;
      successIfDone();
    }, abortable);
  }

  /**
   * Returns an AsyncTask resolved with the first value or error returned by the factories.
   * When it appends, all the other factories are aborted.
   */
  static race<GFactories extends IGenericAsyncTaskFactoriesList>(
    factories: GFactories,
    abortable: Abortable,
  ): AsyncTask<IAsyncTaskRaceValueReturn<GFactories>> {
    type GValue = IAsyncTaskRaceValueReturn<GFactories>;

    return this.abortOnFinished<GValue>((
      success: IAsyncTaskSuccessFunction<GValue>,
      error: IAsyncTaskErrorFunction,
      abortable: Abortable,
    ): void => {
      const iterator: Iterator<IAsyncTaskFactory<GValue>> = factories[Symbol.iterator]();
      let result: IteratorResult<IAsyncTaskFactory<GValue>>;

      while (!(result = iterator.next()).done) {
        const task: AsyncTask<GValue> = this.fromFactory(result.value, abortable);
        task.#resolvedStateEventEmitter.subscribe((
          state: IAsyncTaskResolvedState<GValue>,
        ): void => {
          if (state.state === 'success') {
            success(state.value);
          } else if (state.state === 'error') {
            error(state.error);
          }
        });
      }
    }, abortable);
  }

  /**
   * Returns a "successful" AsyncTask when all the factories are resolved.
   * The result is an array with the state of each of these factories.
   */
  static allSettled<GFactories extends IGenericAsyncTaskFactoriesList>(
    factories: GFactories,
    abortable: Abortable,
  ): AsyncTask<IAsyncTaskAllSettledValuesListReturn<GFactories>> {
    type GValues = IAsyncTaskAllSettledValuesListReturn<GFactories>;
    type GValue = GValues[number];

    return new AsyncTask<GValues>((
      success: IAsyncTaskSuccessFunction<GValues>,
    ): void => {
      let done: number = 0;
      let total: number = 0;
      let values: IAsyncTaskAllSettledState<any>[];

      const successIfDone = (): void => {
        if (done === total) {
          success(values as GValues);
        }
      };

      const iterator: Iterator<IAsyncTaskFactory<GValue>> = factories[Symbol.iterator]();
      let result: IteratorResult<IAsyncTaskFactory<GValue>>;

      while (!(result = iterator.next()).done) {
        const i: number = total;
        total++;

        const task: AsyncTask<GValue> = this.fromFactory(result.value, abortable);
        task.#resolvedStateEventEmitter.subscribe((
          state: IAsyncTaskResolvedState<GValue>,
        ): void => {
          if (
            (state.state === 'success')
            || (state.state === 'error')
          ) {
            done++;
            values[i] = state;
            successIfDone();
          }
        });
      }

      values = new Array(total) as GValues;
      successIfDone();
    }, abortable);
  }


  static switchAbortable<GValue extends IAsyncTaskConstraint<GValue>>(
    asyncTask: AsyncTask<GValue>,
    abortable: Abortable,
  ): AsyncTask<GValue> {
    if (abortable === asyncTask.#abortable) {
      return asyncTask;
    } else {
      return asyncTask.#resolved((
        state: IAsyncTaskResolvedState<GValue>,
      ): IAsyncTaskInput<GValue> | never => {
        if (state.state === 'success') {
          return state.value;
        } else if (state.state === 'error') {
          throw state.error;
        } else /*if (state.state === 'abort')*/ {
          throw state.reason;
        }
      }, abortable);
    }
  }

  static resolved<GValue extends IAsyncTaskConstraint<GValue>>(
    asyncTask: AsyncTask<GValue>,
    callback: IAsyncTaskResolvedStateFunction<GValue>,
  ): void {
    asyncTask.#resolvedStateEventEmitter.subscribe(callback);
  }

  // the internal state of this AsyncTask
  #state: IAsyncTaskState;
  // the state of this AsyncTask represented as an EventEmitter
  readonly #resolvedStateEventEmitter: SingleEventEmitter<IAsyncTaskResolvedState<GValue>>;
  // the abortable linked to this AsyncTask
  readonly #abortable: Abortable;

  constructor(
    init: IAsyncTaskInitFunction<GValue>,
    abortable: Abortable,
  ) {
    this.#state = PENDING_STATE;
    this.#resolvedStateEventEmitter = new SingleEventEmitter<IAsyncTaskResolvedState<GValue>>();
    this.#abortable = abortable;

    // leaves the "resolving" state to enter in a "resolved" state.
    const resolved = (
      resolvedState: IAsyncTaskResolvedState<GValue>,
    ): void => {
      if (this.#state === RESOLVING_STATE) {
        this.#state = RESOLVED_STATE;
        this.#resolvedStateEventEmitter.emit(resolvedState);

        setTimeout(() => {
          if (
            (resolvedState.state === 'error')
            && !this.#resolvedStateEventEmitter.valueConsumed
          ) {
            console.error(`Uncaught (in AsyncTask)`, resolvedState.error);
          }
        }, 0);
      }
    };

    // resolves this AsyncTask into an "abort" state
    const resolvedWithAbort = (
      reason: any,
    ): void => {
      resolved({
        state: 'abort',
        reason,
      });
    };

    // aborts this AsyncTask
    const abort = (
      reason: any,
    ): void => {
      if (this.#state === PENDING_STATE) {
        this.#state = RESOLVING_STATE;
        resolvedWithAbort(reason);
      }
    };

    if (abortable.aborted) {
      abort(abortable.reason);
    } else {
      abortable.onAbort(abort);

      // resolves an IAsyncTaskInput:
      // it waits until the provided "input" is fully resolved, and calls the corresponding callback.
      // - a Promise: fulfilled => resolvedWithSuccess(), rejected => resolvedWithError()
      // - a AsyncTask: successful => resolvedWithSuccess(), errored => resolvedWithError(), aborted => resolvedWithAbort()
      // - another value: resolvedWithSuccess()
      // this garanties that the "value" given to this AsyncTask follows the IAsyncTaskConstraint.
      const resolve = <GValue extends IAsyncTaskConstraint<GValue>>(
        input: IAsyncTaskInput<GValue>,
        abortable: Abortable,
        resolvedWithSuccess: (
          value: GValue,
        ) => void,
        resolvedWithError: (
          error: any,
        ) => void,
        resolvedWithAbort: (
          reason: any,
        ) => void,
      ): void => {
        if (abortable.aborted) {
          resolvedWithAbort(abortable.reason);
        } else {
          if (input instanceof AsyncTask) {
            if (input.#abortable === abortable) {
              input.#resolvedStateEventEmitter.subscribe((
                state: IAsyncTaskResolvedState<GValue>,
              ): void => {
                if (state.state === 'success') {
                  resolvedWithSuccess(state.value);
                } else if (state.state === 'error') {
                  resolvedWithError(state.error);
                } else/* if (state.state === 'abort')*/ {
                  resolvedWithAbort(state.reason);
                }
              });
            } else {
              resolvedWithError(new Error(`AsyncTask must have the same Abortable than the one provided.`));
            }
          } else if (input instanceof Promise) {
            input.then(
              (
                value: GValue,
              ): void => {
                resolve<GValue>(
                  value,
                  abortable,
                  resolvedWithSuccess,
                  resolvedWithError,
                  resolvedWithAbort,
                );
              },
              (
                error: any,
              ): any => {
                resolve<GValue>(
                  error,
                  abortable,
                  resolvedWithError,
                  resolvedWithError,
                  resolvedWithAbort,
                );
              },
            );
          } else {
            resolvedWithSuccess(input);
          }
        }
      };

      // resolves this AsyncTask into a "success" state
      const resolvedWithSuccess = (
        value: GValue,
      ): void => {
        resolved({
          state: 'success',
          value,
        });
      };

      // resolves this AsyncTask into an "error" state
      const resolvedWithError = (
        error: any,
      ): void => {
        resolved({
          state: 'error',
          error,
        });
      };

      // starts resolving this AsyncTask with a "success" state as target (however, the resolved state may differ depending on the given value).
      const success = (
        value: IAsyncTaskInput<GValue>,
      ): void => {
        if (this.#state === PENDING_STATE) {
          this.#state = RESOLVING_STATE;
          resolve(
            value,
            abortable,
            resolvedWithSuccess,
            resolvedWithError,
            resolvedWithAbort,
          );
        }
      };

      // starts resolving this AsyncTask with an "error" state as target.
      const error = (
        error: any,
      ): void => {
        if (this.#state === PENDING_STATE) {
          this.#state = RESOLVING_STATE;
          resolve(
            error,
            abortable,
            resolvedWithError,
            resolvedWithError,
            resolvedWithAbort,
          );
        }
      };

      try {
        init(
          success,
          error,
          abortable,
        );
      } catch (_error: unknown) {
        error(_error);
      }
    }
  }

  get abortable(): Abortable {
    return this.#abortable;
  }

  // resolvedState(
  //   callback: IAsyncTaskResolvedStateFunction<GValue>,
  // ): this {
  //   this.#resolvedStateEventEmitter.subscribe(callback);
  //   return this;
  // }

  #resolved<GNewValue extends IAsyncTaskConstraint<GNewValue>>(
    onResolved: IAsyncTaskOnResolvedFunction<GValue, GNewValue>,
    abortable: Abortable,
  ): AsyncTask<GNewValue> {
    return new AsyncTask<GNewValue>((
      success: IAsyncTaskSuccessFunction<GNewValue>,
      error: IAsyncTaskErrorFunction,
      abortable: Abortable,
    ): void => {
      abortable.onAbort(
        this.#resolvedStateEventEmitter.subscribe((
          state: IAsyncTaskResolvedState<GValue>,
        ): void => {
          try {
            return success(onResolved(state, abortable));
          } catch (_error: unknown) {
            return error(_error);
          }
        })
      );
    }, abortable);
  }

  successful<GNewValue extends IAsyncTaskConstraint<GNewValue>>(
    onSuccessful: IAsyncTaskOnSuccessfulFunction<GValue, GNewValue>,
  ): AsyncTask<GNewValue> {
    return this.#resolved((
      state: IAsyncTaskResolvedState<GValue>,
      abortable: Abortable,
    ): IAsyncTaskInput<GNewValue> | never => {
      if (state.state === 'success') {
        return onSuccessful(state.value, abortable);
      } else if (state.state === 'error') {
        throw state.error;
      } else /*if (state.state === 'abort')*/ {
        throw state.reason;
      }
    }, this.#abortable);
  }

  errored<GNewValue extends IAsyncTaskConstraint<GNewValue>>(
    onErrored: IAsyncTaskOnErroredFunction<GNewValue>,
  ): AsyncTask<GValue | GNewValue> {
    return this.#resolved((
      state: IAsyncTaskResolvedState<GValue>,
      abortable: Abortable,
    ): IAsyncTaskInput<GValue | GNewValue> | never => {
      if (state.state === 'success') {
        return state.value;
      } else if (state.state === 'error') {
        return onErrored(state.error, abortable);
      } else /*if (state.state === 'abort')*/ {
        throw state.reason;
      }
    }, this.#abortable);
  }

  // aborted<GNewValue extends IAsyncTaskConstraint<GNewValue>>(
  //   onAborted: IAsyncTaskOnAbortedFunction<GNewValue>,
  //   abortable: Abortable,
  // ): AsyncTask<GValue | GNewValue> {
  //   return this.resolved((
  //     state: IAsyncTaskResolvedState<GValue>,
  //     abortable: Abortable,
  //   ): IAsyncTaskInput<GValue | GNewValue> | never => {
  //     if (state.state === 'success') {
  //       return state.value;
  //     } else if (state.state === 'error') {
  //       throw state.error;
  //     } else /*if (state.state === 'abort')*/ {
  //       return onAborted(state.reason, abortable);
  //     }
  //   }, abortable);
  // }
  //
  // switchAbortable(
  //   abortable: Abortable,
  // ): AsyncTask<GValue> {
  //   if (abortable === this.#abortable) {
  //     return this;
  //   } else {
  //     return this.resolved((
  //       state: IAsyncTaskResolvedState<GValue>,
  //     ): IAsyncTaskInput<GValue> | never => {
  //       if (state.state === 'success') {
  //         return state.value;
  //       } else if (state.state === 'error') {
  //         throw state.error;
  //       } else /*if (state.state === 'abort')*/ {
  //         throw state.reason;
  //       }
  //     }, abortable);
  //   }
  // }

  /* PROMISE */

  then<GNewValue extends IAsyncTaskConstraint<GNewValue>>(
    onSuccessful: IAsyncTaskOnSuccessfulFunction<GValue, GNewValue>,
    onErrored: IAsyncTaskOnErroredFunction<GNewValue>,
  ): AsyncTask<GNewValue> {
    return this.#resolved((
      state: IAsyncTaskResolvedState<GValue>,
      abortable: Abortable,
    ): IAsyncTaskInput<GNewValue> | never => {
      if (state.state === 'success') {
        return onSuccessful(state.value, abortable);
      } else if (state.state === 'error') {
        return onErrored(state.error, abortable);
      } else /*if (state.state === 'abort')*/ {
        throw state.reason;
      }
    }, this.#abortable);
  }

  finally(
    onFinally: IAsyncTaskOnFinallyFunction<GValue>,
  ): AsyncTask<GValue> {
    return this.#resolved((
      state: IAsyncTaskResolvedState<GValue>,
      abortable: Abortable,
    ): IAsyncTaskInput<GValue> | never => {
      return AsyncTask.fromFactory((abortable: Abortable) => onFinally(state, abortable), abortable)
        .successful((): IAsyncTaskInput<GValue> | never => {
          if (state.state === 'success') {
            return state.value;
          } else if (state.state === 'error') {
            throw state.error;
          } else /*if (state.state === 'abort')*/ {
            throw state.reason;
          }
        });
    }, this.#abortable);
  }

  toPromise(): Promise<GValue> {
    return new Promise<GValue>((
      resolve: (value: GValue) => void,
      reject: (reason?: any) => void,
    ): void => {
      this.#resolvedStateEventEmitter.subscribe((
        state: IAsyncTaskResolvedState<GValue>,
      ): void => {
        if (state.state === 'success') {
          resolve(state.value);
        } else if (state.state === 'error') {
          reject(state.error);
        } else if (state.state === 'abort') {
          reject(new Error(`Aborted`, { cause: state.reason }));
        }
      });
    });
  }
}

